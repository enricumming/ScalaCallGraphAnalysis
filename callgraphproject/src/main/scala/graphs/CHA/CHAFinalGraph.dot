digraph CallGraph {
  node [shape=box];
  "println(s\"$caller -> $callee\")" [style=filled, fillcolor=white];
  "normalizeNodes(graphNodes, graphEdges, unreachableNodes)" [style=filled, fillcolor=white];
  "traverseAST(source, edges, \"main\")" [style=filled, fillcolor=white];
  "propagateUnreachability(graphEdges, unreachableNodes)" [style=filled, fillcolor=white];
  "RA.println(s\"Llamado seleccionado: $caller -> $methodName\")" [style=filled, fillcolor=red];
  "println(\"Uso: ManualMethodCallDetector <archivo_input.scala> <archivo_output.dot>\")" [style=filled, fillcolor=white];
  "RA.traverseAST()" [style=filled, fillcolor=red];
  "writer.close()" [style=filled, fillcolor=white];
  "RA.println(s\"Constructor detectado: $caller -> $constructorNode\")" [style=filled, fillcolor=red];
  "addUnreachableNodes(source, graphNodes, methodImplementations, graphEdges, unreachableNodes)" [style=filled, fillcolor=white];
  "PrintWriter.<init>()" [style=filled, fillcolor=white];
  "applyCHA(graphNodes, graphEdges, classHierarchy, methodImplementations)" [style=filled, fillcolor=white];
  "generateGraphFromAST(source, graphNodes, graphEdges, classHierarchy, variableTypes)" [style=filled, fillcolor=white];
  "println(s\"Analizando: ${file.getName}\")" [style=filled, fillcolor=white];
  "println(\"\nJerarquía de clases:\")" [style=filled, fillcolor=white];
  "println(source.structure)" [style=filled, fillcolor=white];
  "println(s\"\nGrafo exportado a '$outputFilePath'\")" [style=filled, fillcolor=white];
  "println(\"Uso: runMain CHA <directorio_proyecto> <archivo_output.dot>\")" [style=filled, fillcolor=white];
  "println(\"\nImplementaciones de métodos:\")" [style=filled, fillcolor=white];
  "methodImplementations.foreach()" [style=filled, fillcolor=white];
  "println(\"\n Nodos inalcanzables:\")" [style=filled, fillcolor=white];
  "source.collect()" [style=filled, fillcolor=white];
  "unreachableNodes.foreach()" [style=filled, fillcolor=white];
  "RA.println(s\"Llamada a println diferenciada: $caller -> $printlnNode\")" [style=filled, fillcolor=red];
  "edges.foreach()" [style=filled, fillcolor=white];
  "graphNodes.foreach()" [style=filled, fillcolor=white];
  "cls.collect()" [style=filled, fillcolor=white];
  "exportToDot(edges, outputFilePath)" [style=filled, fillcolor=white];
  "obj.collect()" [style=filled, fillcolor=white];
  "RA.println(s\"Llamado directo detectado: $caller -> $methodName\")" [style=filled, fillcolor=red];
  "args(1)" [style=filled, fillcolor=white];
  "RA.traverseAST(arg, edges, methodName)" [style=filled, fillcolor=red];
  "println(s\"Grafo exportado a $outputFilePath\")" [style=filled, fillcolor=white];
  "println(s\"$methodName -> ${classes.mkString(\", \")}\")" [style=filled, fillcolor=white];
  "println(\"\nArcos del grafo:\")" [style=filled, fillcolor=white];
  "scalaFiles.foreach()" [style=filled, fillcolor=white];
  "println(s\"$superclass -> ${subclasses.mkString(\", \")}\")" [style=filled, fillcolor=white];
  "IOSource.fromFile()" [style=filled, fillcolor=white];
  "args(0)" [style=filled, fillcolor=white];
  "println(\"\nLlamados de métodos encontrados:\")" [style=filled, fillcolor=white];
  "processUnreachableNodes(unreachableNodes, graphEdges, source)" [style=filled, fillcolor=white];
  "RA.traverseAST(defn.body, edges, methodName)" [style=filled, fillcolor=red];
  "getScalaFiles(inputDirectory)" [style=filled, fillcolor=white];
  "RA.traverseAST(child, edges, caller)" [style=filled, fillcolor=red];
  "graph.toString()" [style=filled, fillcolor=white];
  "println(\"\n Arcos del grafo:\")" [style=filled, fillcolor=white];
  "println(\"Estructura del AST del código:\")" [style=filled, fillcolor=white];
  "Unknown.normalize()" [style=filled, fillcolor=red];
  "println(\"Uso: CallGraphGenerator <archivo_input.scala> <archivo_output.dot>\")" [style=filled, fillcolor=white];
  "StringBuilder.<init>()" [style=filled, fillcolor=white];
  "buildClassHierarchy(source, classHierarchy, methodImplementations)" [style=filled, fillcolor=white];
  "println(\"\nNodos finales del grafo:\")" [style=filled, fillcolor=white];
  "println(\"Uso: runMain CHA <archivo_input.scala> <archivo_output.dot>\")" [style=filled, fillcolor=white];
  "graph.append()" [style=filled, fillcolor=white];
  "println(s\"Call graph generado en $outputFilePath\")" [style=filled, fillcolor=white];
  "Unknown.sanitizeLabel()" [style=filled, fillcolor=red];
  "exportGraphToDot(graphNodes, graphEdges, unreachableNodes, outputFilePath)" [style=filled, fillcolor=white];
  "findCalleesFromGraphNodes(graphNodes, graphEdges, source)" [style=filled, fillcolor=white];
  "System.exit()" [style=filled, fillcolor=white];
  "RA.println(s\"Entrando en el método: $methodName\")" [style=filled, fillcolor=red];
  "graphEdges.foreach()" [style=filled, fillcolor=white];
  "RA.exportToDot()" [style=filled, fillcolor=red];
  "writer.write()" [style=filled, fillcolor=white];
  "classHierarchy.foreach()" [style=filled, fillcolor=white];
  "CHA.main()" -> "scalaFiles.foreach()";
  "CHA2.generateGraphFromAST()" -> "CHA2.addEdge(caller, constructorCall)";
  "CHA.addUnreachableNodes()" -> "CHA.println(s\"Agregando nodo inalcanzable: $methodNode\")";
  "CallGraphGenerator.main()" -> "PrintWriter.<init>()";
  "classHierarchy.foreach()" -> "println(s\"$superclass -> ${subclasses.mkString(\", \")}\")";
  "CHA2.main()" -> "applyCHA(graphNodes, graphEdges, classHierarchy, methodImplementations)";
  "CHA2.main()" -> "println(\"\nImplementaciones de métodos:\")";
  "CHA2.main()" -> "classHierarchy.foreach()";
  "CHA.main()" -> "args(0)";
  "CallGraphGenerator.main()" -> "edges.foreach()";
  "CHA.findEnclosingClassOrTrait()" -> "CHA.Some(cls.name.value)";
  "Unknown.findEnclosing()" -> "Unknown.Some(obj.name.value)";
  "CHA.generateGraphFromAST()" -> "CHA.addEdge(caller, detailedMethodCall)";
  "CHA2.main()" -> "println(\"\nArcos del grafo:\")";
  "CHA2.exportGraphToDot()" -> "CHA2.sanitizeLabel(caller)";
  "RA.traverseAST()" -> "RA.println(s\"Llamada a println diferenciada: $caller -> $printlnNode\")";
  "CHA.applyCHA()" -> "CHA.Set()";
  "CHA2.propagateUnreachability()" -> "CHA2.println(s\"Marcando nodo como inalcanzable: $node\")";
  "CHA.main()" -> "args(1)";
  "CallGraphGenerator.main()" -> "writer.write()";
  "CHA.main()" -> "System.exit()";
  "CHA.generateGraphFromAST()" -> "CHA.println(s\"Nodo '$mainCaller' encontrado, comenzando el recorrido.\")";
  "Unknown.processNode()" -> "Unknown.processNode(arg, methodWithType)";
  "CHA2.main()" -> "processUnreachableNodes(unreachableNodes, graphEdges, source)";
  "CHA.exportGraphToDot()" -> "CHA.sanitizeLabel(node)";
  "RA.traverseAST()" -> "RA.println(s\"Llamado seleccionado: $caller -> $methodName\")";
  "RA.main()" -> "System.exit()";
  "CallGraphGenerator.main()" -> "System.exit()";
  "RA.main()" -> "args(1)";
  "CHA2.main()" -> "println(s\"\nGrafo exportado a '$outputFilePath'\")";
  "Unknown.processNode()" -> "Unknown.variableTypes(varName)";
  "CHA.addUnreachableNodes()" -> "CHA.findEnclosingClassOrTrait(defn, tree)";
  "scalaFiles.foreach()" -> "IOSource.fromFile()";
  "Unknown.processNode()" -> "Unknown.processNode(stat, caller)";
  "CHA.main()" -> "println(s\"\nGrafo exportado a '$outputFilePath'\")";
  "CHA.findEnclosingClassOrTrait()" -> "CHA.Some(trt.name.value)";
  "CHA2.generateGraphFromAST()" -> "CHA2.variableTypes(varName)";
  "CHA2.addUnreachableNodes()" -> "CHA2.findEnclosingClassOrTrait(defn, tree)";
  "CHA.applyCHA()" -> "CHA.println(s\"Advertencia: formato inesperado en callee '$callee'\")";
  "CHA.getScalaFiles()" -> "CHA.println(s\"El directorio $directory no existe o no es un directorio.\")";
  "writer.write()" -> "graph.toString()";
  "CHA2.applyCHA()" -> "CHA2.Set()";
  "CHA.buildClassHierarchy()" -> "CHA.Set()";
  "scalaFiles.foreach()" -> "findCalleesFromGraphNodes(graphNodes, graphEdges, source)";
  "RA.traverseAST()" -> "RA.println(s\"Llamado directo detectado: $caller -> $methodName\")";
  "CallGraphGenerator.main()" -> "IOSource.fromFile()";
  "scalaFiles.foreach()" -> "processUnreachableNodes(unreachableNodes, graphEdges, source)";
  "CHA.generateGraphFromAST()" -> "CHA.addEdge(caller, methodWithType)";
  "CallGraphGenerator.main()" -> "writer.close()";
  "CHA.main()" -> "propagateUnreachability(graphEdges, unreachableNodes)";
  "CHA.applyCHA()" -> "CHA.println(s\"Agregando nodo para subtipo transitivo: $subtypeMethod\")";
  "CHA2.main()" -> "println(\"\nJerarquía de clases:\")";
  "CallGraphGenerator.main()" -> "StringBuilder.<init>()";
  "Unknown.processNode()" -> "Unknown.addEdge(caller, methodWithType)";
  "RA.main()" -> "println(\"\nLlamados de métodos encontrados:\")";
  "RA.traverseAST()" -> "RA.println(s\"Entrando en el método: $methodName\")";
  "scalaFiles.foreach()" -> "addUnreachableNodes(source, graphNodes, methodImplementations, graphEdges, unreachableNodes)";
  "Unknown.recurse()" -> "Unknown.Set()";
  "Unknown.processNode()" -> "Unknown.findEnclosingClassOrTrait(defn, tree)";
  "RA.traverseAST()" -> "RA.traverseAST(arg, edges, methodName)";
  "CHA2.generateGraphFromAST()" -> "CHA2.processNode(init, caller)";
  "CHA2.main()" -> "unreachableNodes.foreach()";
  "graphEdges.foreach()" -> "println(s\"$caller -> $callee\")";
  "RA.main()" -> "println(\"Estructura del AST del código:\")";
  "edges.foreach()" -> "println(s\"$caller -> $callee\")";
  "CHA2.main()" -> "graphNodes.foreach()";
  "CHA.findCalleesFromGraphNodes()" -> "CHA.findEnclosingClassOrTrait(defn, tree)";
  "Unknown.findEnclosing()" -> "Unknown.Some(cls.name.value)";
  "CHA.generateGraphFromAST()" -> "CHA.processNode(child, caller)";
  "Unknown.processNode()" -> "Unknown.processNode(init, caller)";
  "CHA.generateGraphFromAST()" -> "CHA.processNode(init, caller)";
  "RA.main()" -> "IOSource.fromFile()";
  "CHA.generateGraphFromAST()" -> "CHA.variableTypes(varName)";
  "Unknown.findEnclosing()" -> "Unknown.Some(trt.name.value)";
  "CHA.generateGraphFromAST()" -> "CHA.println(s\"Agregando arco: $caller -> $callee\")";
  "CallGraphGenerator.main()" -> "graph.append()";
  "RA.main()" -> "println(\"\n Arcos del grafo:\")";
  "CHA2.generateGraphFromAST()" -> "CHA2.processNode(child, caller)";
  "CHA2.main()" -> "println(\"\nNodos finales del grafo:\")";
  "CHA.addUnreachableNodes()" -> "CHA.Set(caller, callee)";
  "CHA2.addUnreachableNodes()" -> "CHA2.Set(caller, callee)";
  "scalaFiles.foreach()" -> "generateGraphFromAST(source, graphNodes, graphEdges, classHierarchy, variableTypes)";
  "RA.main()" -> "args(0)";
  "RA.traverseAST()" -> "RA.println(s\"Constructor detectado: $caller -> $constructorNode\")";
  "CHA2.addUnreachableNodes()" -> "CHA2.println(s\"Agregando nodo inalcanzable: $methodNode\")";
  "CHA2.exportGraphToDot()" -> "CHA2.sanitizeLabel(node)";
  "CHA2.findCalleesFromGraphNodes()" -> "CHA2.findEnclosingClassOrTrait(defn, tree)";
  "CHA2.main()" -> "generateGraphFromAST(source, graphNodes, graphEdges, classHierarchy, variableTypes)";
  "CHA2.generateGraphFromAST()" -> "CHA2.println(s\"Agregando arco: $caller -> $callee\")";
  "CHA2.exportGraphToDot()" -> "CHA2.sanitizeLabel(callee)";
  "CHA2.findCalleesFromGraphNodes()" -> "CHA2.println(s\"Agregando arco: $node -> $newCallee\")";
  "CHA.findAllSubtypes()" -> "CHA.Set()";
  "Unknown.processNode()" -> "Unknown.addEdge(caller, detailedMethodCall)";
  "CHA2.main()" -> "graphEdges.foreach()";
  "CHA.findEnclosingClassOrTrait()" -> "CHA.Some(obj.name.value)";
  "scalaFiles.foreach()" -> "buildClassHierarchy(source, classHierarchy, methodImplementations)";
  "RA.main()" -> "exportToDot(edges, outputFilePath)";
  "CHA.processUnreachableNodes()" -> "CHA.findEnclosingClassOrTrait(defn, tree)";
  "CHA2.main()" -> "propagateUnreachability(graphEdges, unreachableNodes)";
  "CallGraphGenerator.main()" -> "println(s\"Call graph generado en $outputFilePath\")";
  "CHA2.processUnreachableNodes()" -> "CHA2.findEnclosingClassOrTrait(defn, tree)";
  "RA.traverseAST()" -> "RA.traverseAST(child, edges, caller)";
  "CHA2.main()" -> "IOSource.fromFile()";
  "CHA2.main()" -> "normalizeNodes(graphNodes, graphEdges, unreachableNodes)";
  "CHA.normalizeNodes()" -> "CHA.normalize(caller)";
  "methodImplementations.foreach()" -> "println(s\"$methodName -> ${classes.mkString(\", \")}\")";
  "CHA2.generateGraphFromAST()" -> "CHA2.addEdge(caller, detailedMethodCall)";
  "RA.main()" -> "println(source.structure)";
  "CHA2.findEnclosingClassOrTrait()" -> "CHA2.Some(trt.name.value)";
  "CHA.generateGraphFromAST()" -> "CHA.processNode(arg, methodWithType)";
  "CHA2.main()" -> "buildClassHierarchy(source, classHierarchy, methodImplementations)";
  "CHA2.findEnclosingClassOrTrait()" -> "CHA2.Some(obj.name.value)";
  "CallGraphGenerator.main()" -> "source.collect()";
  "source.collect()" -> "obj.collect()";
  "CHA2.main()" -> "methodImplementations.foreach()";
  "CHA2.generateGraphFromAST()" -> "CHA2.processNode(stat, caller)";
  "CHA2.generateGraphFromAST()" -> "CHA2.println(s\"Nodo '$mainCaller' encontrado, comenzando el recorrido.\")";
  "CHA2.normalizeNodes()" -> "CHA2.normalize(callee)";
  "CHA.exportGraphToDot()" -> "CHA.sanitizeLabel(callee)";
  "CHA2.processUnreachableNodes()" -> "CHA2.println(s\"Agregando arco desde inalcanzable: $node -> $newCallee\")";
  "CHA.generateGraphFromAST()" -> "CHA.findEnclosingClassOrTrait(defn, tree)";
  "CHA2.buildClassHierarchy()" -> "CHA2.Set()";
  "CHA2.findCalleesFromGraphNodes()" -> "CHA2.println(s\"Revisando cuerpo de $node para nuevos métodos.\")";
  "Unknown.addEdge()" -> "Unknown.println(s\"Agregando arco: $caller -> $callee\")";
  "CHA2.main()" -> "addUnreachableNodes(source, graphNodes, methodImplementations, graphEdges, unreachableNodes)";
  "CHA2.generateGraphFromAST()" -> "CHA2.processNode(arg, methodWithType)";
  "CHA2.main()" -> "findCalleesFromGraphNodes(graphNodes, graphEdges, source)";
  "CHA.propagateUnreachability()" -> "CHA.println(s\"Marcando nodo como inalcanzable: $node\")";
  "CallGraphGenerator.main()" -> "args(0)";
  "RA.main()" -> "edges.foreach()";
  "CHA2.generateGraphFromAST()" -> "CHA2.processNode(defn.body, mainCaller)";
  "RA.main()" -> "println(\"Uso: ManualMethodCallDetector <archivo_input.scala> <archivo_output.dot>\")";
  "CHA2.findEnclosingClassOrTrait()" -> "CHA2.Some(cls.name.value)";
  "Unknown.processNode()" -> "Unknown.println(s\"Nodo '$mainCaller' encontrado, comenzando el recorrido.\")";
  "CHA.processUnreachableNodes()" -> "CHA.println(s\"Procesando nodo inalcanzable: $node para nuevos métodos.\")";
  "CHA2.main()" -> "println(\"\n Nodos inalcanzables:\")";
  "CHA.main()" -> "getScalaFiles(inputDirectory)";
  "CHA.normalizeNodes()" -> "CHA.normalize(callee)";
  "CHA.generateGraphFromAST()" -> "CHA.processNode(defn, \"main\")";
  "CHA.generateGraphFromAST()" -> "CHA.processNode(defn.body, mainCaller)";
  "CHA2.processUnreachableNodes()" -> "CHA2.println(s\"Procesando nodo inalcanzable: $node para nuevos métodos.\")";
  "CHA2.main()" -> "args(0)";
  "CHA2.normalizeNodes()" -> "CHA2.normalize(caller)";
  "CHA.findCalleesFromGraphNodes()" -> "CHA.println(s\"Agregando arco: $node -> $newCallee\")";
  "CHA2.findEnclosingClassOrTrait()" -> "CHA2.findEnclosing(tree)";
  "CHA.main()" -> "normalizeNodes(graphNodes, graphEdges, unreachableNodes)";
  "CHA.findEnclosingClassOrTrait()" -> "CHA.findEnclosing(tree)";
  "CHA.exportGraphToDot()" -> "CHA.sanitizeLabel(caller)";
  "Unknown.processNode()" -> "Unknown.addEdge(caller, constructorCall)";
  "CHA.processUnreachableNodes()" -> "CHA.println(s\"Agregando arco desde inalcanzable: $node -> $newCallee\")";
  "CHA2.main()" -> "args(1)";
  "CHA2.findAllSubtypes()" -> "CHA2.Set()";
  "RA.traverseAST()" -> "RA.traverseAST(defn.body, edges, methodName)";
  "CHA.generateGraphFromAST()" -> "CHA.processNode(stat, caller)";
  "CallGraphGenerator.main()" -> "println(\"Uso: CallGraphGenerator <archivo_input.scala> <archivo_output.dot>\")";
  "RA.main()" -> "traverseAST(source, edges, \"main\")";
  "Unknown.processNode()" -> "Unknown.processNode(child, caller)";
  "CHA2.main()" -> "System.exit()";
  "source.collect()" -> "cls.collect()";
  "CHA.main()" -> "println(\"Uso: runMain CHA <directorio_proyecto> <archivo_output.dot>\")";
  "CHA2.applyCHA()" -> "CHA2.findAllSubtypes(contextType, classHierarchy)";
  "edges.foreach()" -> "graph.append()";
  "Unknown.processNode()" -> "Unknown.processNode(defn.body, mainCaller)";
  "CHA2.main()" -> "exportGraphToDot(graphNodes, graphEdges, unreachableNodes, outputFilePath)";
  "CHA2.generateGraphFromAST()" -> "CHA2.findEnclosingClassOrTrait(defn, tree)";
  "RA.main()" -> "println(s\"Grafo exportado a $outputFilePath\")";
  "CHA.findCalleesFromGraphNodes()" -> "CHA.println(s\"Revisando cuerpo de $node para nuevos métodos.\")";
  "CallGraphGenerator.main()" -> "args(1)";
  "CHA2.generateGraphFromAST()" -> "CHA2.addEdge(caller, methodWithType)";
  "CHA2.applyCHA()" -> "CHA2.println(s\"Agregando nodo para subtipo transitivo: $subtypeMethod\")";
  "CHA.main()" -> "applyCHA(graphNodes, graphEdges, classHierarchy, methodImplementations)";
  "CHA.applyCHA()" -> "CHA.findAllSubtypes(contextType, classHierarchy)";
  "CHA.generateGraphFromAST()" -> "CHA.addEdge(caller, constructorCall)";
  "CHA.main()" -> "exportGraphToDot(graphNodes, graphEdges, unreachableNodes, outputFilePath)";
  "CHA2.generateGraphFromAST()" -> "CHA2.processNode(defn, \"main\")";
  "CHA2.main()" -> "println(\"Uso: runMain CHA <archivo_input.scala> <archivo_output.dot>\")";
  "scalaFiles.foreach()" -> "println(s\"Analizando: ${file.getName}\")";
}
